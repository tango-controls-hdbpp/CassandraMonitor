//+======================================================================
// $Source:  $
//
// Project:   Tango
//
// Description:  java source code for main swing class.
//
// $Author: verdier $
//
// Copyright (C) :      2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015
//						European Synchrotron Radiation Facility
//                      BP 220, Grenoble 38043
//                      FRANCE
//
// This file is part of Tango.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//-======================================================================

package org.tango.cassandra_monitor_client.gui;

import fr.esrf.Tango.DevFailed;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import fr.esrf.tangoatk.widget.util.ErrorPane;
import org.tango.cassandra_monitor_client.tools.PopupHtml;
import org.tango.cassandra_monitor_client.tools.SplashUtils;
import org.tango.hdb_tables.CassandraConnection;
import org.tango.hdb_tables.HdbTable;
import org.tango.hdb_tables.HdbTables;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.StringTokenizer;

/**
 *	JFrame Class to display HDB++ info
 *
 * @author  Pascal Verdier
 */

public class HdbTableMainFrame extends JFrame {
    private JFrame parent;
    private HdbTables hdbTables;
    private String searchedAttribute = "";
    private final static String[] COLUMN_HEADERS = { "Table Name", "Attributes"};
    private static final int[] COLUMN_WIDTH = { 200, 80};
	//=======================================================
    /**
	 *	Creates new form HdbTableMainFrame
	 */
	//=======================================================
    public HdbTableMainFrame() throws DevFailed {
        this(null);
    }
	//=======================================================
	//=======================================================
    public HdbTableMainFrame(JFrame parent) throws DevFailed {
        this.parent = parent;
        SplashUtils.getInstance().startSplash();
        SplashUtils.getInstance().setSplashProgress(5, "Building GUI");
        SplashUtils.getInstance().startAutoUpdate();
        initComponents();

        hdbTables = CassandraConnection.getInstance().getHdbTables();
        DisplayTable displayTable = new DisplayTable();
        tableScrollPane.setViewportView(displayTable);
        tableScrollPane.setPreferredSize(new Dimension(displayTable.width, 450));

        titleLabel.setText("HDB++  (" + hdbTables.getAttributeCount() +
                " attributes in " + hdbTables.size() + " tables)");

        //  Display connection information
        String info = CassandraConnection.getInstance().getConnectionInformation();
        connectionTextArea.setText(info);
        StringTokenizer stk = new StringTokenizer(info, "\n");
        connectionTextArea.setRows(stk.countTokens()+1);

        pack();
        if (parent==null)
            ATKGraphicsUtils.centerFrameOnScreen(this);
        else {
            Point location = parent.getLocationOnScreen();
            location.x += parent.getWidth()/2 - getWidth()/2;
            location.y += parent.getHeight();
            setLocation(location);
        }
        SplashUtils.getInstance().stopSplash();
	}
    //===============================================================
    //===============================================================



	//=======================================================
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	//=======================================================
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanel topPanel = new JPanel();
        titleLabel = new JLabel();
        JPanel centerPanel = new JPanel();
        JScrollPane jScrollPane2 = new JScrollPane();
        attributeTextArea = new JTextArea();
        JPanel jPanel1 = new JPanel();
        hdbTableLabel = new JLabel();
        JScrollPane jScrollPane1 = new JScrollPane();
        connectionTextArea = new JTextArea();
        JPanel jPanel2 = new JPanel();
        JPanel jPanel3 = new JPanel();
        JLabel jLabel1 = new JLabel();
        tableScrollPane = new JScrollPane();
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu();
        JMenuItem exitItem = new JMenuItem();
        JMenu editMenu = new JMenu();
        JMenuItem findMenuItem = new JMenuItem();
        JMenuItem multipleTableMenuItem = new JMenuItem();
        JMenu helpMenu = new JMenu();
        JMenuItem jMenuItem1 = new JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        titleLabel.setFont(new Font("Dialog", Font.BOLD, 18));
        titleLabel.setText("jLabel1");
        topPanel.add(titleLabel);

        getContentPane().add(topPanel, BorderLayout.PAGE_START);

        centerPanel.setLayout(new BorderLayout());

        attributeTextArea.setEditable(false);
        attributeTextArea.setColumns(40);
        attributeTextArea.setRows(5);
        jScrollPane2.setViewportView(attributeTextArea);

        centerPanel.add(jScrollPane2, BorderLayout.CENTER);

        hdbTableLabel.setText("           ");
        jPanel1.add(hdbTableLabel);

        centerPanel.add(jPanel1, BorderLayout.PAGE_START);

        getContentPane().add(centerPanel, BorderLayout.CENTER);

        connectionTextArea.setColumns(20);
        connectionTextArea.setRows(5);
        jScrollPane1.setViewportView(connectionTextArea);

        getContentPane().add(jScrollPane1, BorderLayout.PAGE_END);

        jPanel2.setLayout(new BorderLayout());

        jLabel1.setText("       ");
        jLabel1.setToolTipText("");
        jPanel3.add(jLabel1);

        jPanel2.add(jPanel3, BorderLayout.NORTH);
        jPanel2.add(tableScrollPane, BorderLayout.CENTER);

        getContentPane().add(jPanel2, BorderLayout.WEST);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        exitItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitItem.setMnemonic('E');
        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('E');
        editMenu.setText("Edit");

        findMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findMenuItem.setMnemonic('F');
        findMenuItem.setText("Find Attribute");
        findMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(findMenuItem);

        multipleTableMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        multipleTableMenuItem.setMnemonic('A');
        multipleTableMenuItem.setText("Attr. in several tables");
        multipleTableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleTableMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(multipleTableMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("help");

        jMenuItem1.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setMnemonic('A');
        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //=======================================================
	//=======================================================
    @SuppressWarnings("UnusedParameters")
    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        doClose();
    }//GEN-LAST:event_exitItemActionPerformed
	//=======================================================
	//=======================================================
    @SuppressWarnings("UnusedParameters")
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        doClose();
    }//GEN-LAST:event_exitForm
    //=======================================================
    //=======================================================
    @SuppressWarnings("UnusedParameters")
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String  message =
                "This application is able to show hdb tables \n" +
                "  and attribute list for a specified table\n" +
                "\nPascal Verdier - ESRF - Accelerator Control Unit";
        JOptionPane.showMessageDialog(this, message, "Help Window", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    //=======================================================
    //=======================================================
    @SuppressWarnings("UnusedParameters")
    private void multipleTableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleTableMenuItemActionPerformed
        List<String> list = hdbTables.checkAttributeInMultipleTables();
        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No attribute defined in several tables");
        }
        else
            for (String attribute : list) {
                System.err.println(attribute);
            }
    }//GEN-LAST:event_multipleTableMenuItemActionPerformed
    //=======================================================
    //=======================================================
    @SuppressWarnings("UnusedParameters")
    private void findMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuItemActionPerformed
        // TODO add your handling code here:
        String str = JOptionPane.showInputDialog(this, "Attribute name ?", searchedAttribute);
        if (str!=null) {
            searchedAttribute = str;
            str = str.toLowerCase();
            List<String[]> list = new ArrayList<>();
            for (HdbTable hdbTable : hdbTables) {
                for (String attributeName : hdbTable) {
                    if (attributeName.toLowerCase().contains(str)) {
                        list.add(new String[] { attributeName, hdbTable.getName() });
                    }
                }
            }
            if(list.isEmpty())
                JOptionPane.showMessageDialog(this, searchedAttribute + " not found !");
            else {
                new PopupHtml(this).show(new String[] { "Attribute", "HDB table"}, list);
            }
        }
    }//GEN-LAST:event_findMenuItemActionPerformed
	//=======================================================
	//=======================================================
    private void doClose() {
        if (parent==null)
            System.exit(0);
        else {
            setVisible(false);
        }
    }
	//=======================================================
	//=======================================================



	//=======================================================
    /**
     * @param args the command line arguments
     */
	//=======================================================
    public static void main(String args[]) {
		try {
      		new HdbTableMainFrame().setVisible(true);
		}
		catch(DevFailed e) {
            SplashUtils.getInstance().stopSplash();
            ErrorPane.showErrorMessage(new Frame(), null, e);
			System.exit(0);
		}
    }
	//=======================================================
	//=======================================================



	//=======================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextArea attributeTextArea;
    private JTextArea connectionTextArea;
    private JLabel hdbTableLabel;
    private JScrollPane tableScrollPane;
    private JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
	//=======================================================


    //===============================================================
    //===============================================================
    private class DisplayTable extends JTable {
        private DataTableModel model;
        private int width = 0;
        //===============================================================
        /**
         *	Creates new HardwareChangesTable
         */
        //===============================================================
        public DisplayTable() {
            model = new DataTableModel();

            // Create the table
            setModel(model);
            setRowSelectionAllowed(true);
            setColumnSelectionAllowed(true);
            setDefaultRenderer(String.class, new LabelCellRenderer());
            setDragEnabled(false);
            setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            getTableHeader().setFont(new Font("Dialog", Font.BOLD, 14));
            addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(MouseEvent evt) {
                    tableActionPerformed(evt);
                }
            });
            getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(MouseEvent evt) {
                    tableHeaderActionPerformed(evt);
                }
            });

            //  Set column TableWidth
            final Enumeration columnEnum = getColumnModel().getColumns();
            int i = 0;
            TableColumn tableColumn;
            while (columnEnum.hasMoreElements()) {
                tableColumn = (TableColumn) columnEnum.nextElement();
                tableColumn.setPreferredWidth(COLUMN_WIDTH[i]);
                width += COLUMN_WIDTH[i++];
            }
        }
        //=======================================================
        private void tableHeaderActionPerformed(MouseEvent evt) {
            if ((evt.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) {
                int column = getTableHeader().columnAtPoint(new Point(evt.getX(), evt.getY()));
                hdbTables.sortTables(column);
            }
            model.fireTableDataChanged();
        }
        //=======================================================
        private void tableActionPerformed(MouseEvent evt) {
            int row = rowAtPoint(new Point(evt.getX(), evt.getY()));
            HdbTable hdbTable = hdbTables.get(row);
            selectedRow = rowAtPoint(new Point(evt.getX(), evt.getY()));

            int mask = evt.getModifiers();
            if (evt.getClickCount()==1 && (mask & MouseEvent.BUTTON1_MASK)!=0) {
                StringBuilder sb = new StringBuilder();
                for (String attributeName : hdbTable) {
                    sb.append(attributeName).append('\n');
                }
                attributeTextArea.setText(sb.toString());
                hdbTableLabel.setText("HDB Table " + hdbTable);
            }
            repaint();
        }
        //=======================================================
    }
    //=========================================================================
    //=========================================================================


    //=========================================================================
    /**
     * The Table model
     */
    //=========================================================================
    public class DataTableModel extends AbstractTableModel {
        //==========================================================
        public int getColumnCount() {
            return COLUMN_HEADERS.length;
        }
        //==========================================================
        public int getRowCount() {
            return hdbTables.size();
        }
        //==========================================================
        public String getColumnName(int columnIndex) {
            return COLUMN_HEADERS[columnIndex];
        }
        //==========================================================
        public Object getValueAt(int row, int column) {
            //  Value to display is returned by
            // LabelCellRenderer.getTableCellRendererComponent()
            return "";
        }
        //==========================================================
        /**
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         *
         * @param  column the specified co;umn number
         * @return the cell class at first row for specified column.
         */
        //==========================================================
        public Class getColumnClass(int column) {
            if (isVisible())
                return getValueAt(0, column).getClass();
            else
                return null;
        }
        //==========================================================
    }
    //=========================================================================
    //=========================================================================



    private int selectedRow = -1;
    private static final Color firstColumnBackground = new Color(0xd0d0d0);
    private static final Color selectionBackground = new Color(0xe0e0ff);
    //=========================================================================
    /**
     * Renderer to set cell color
     */
    //=========================================================================
    public class LabelCellRenderer extends JLabel implements TableCellRenderer {
        //==========================================================
        public LabelCellRenderer() {
            setFont(new Font("Dialog", Font.BOLD, 12));
            setOpaque(true); //MUST do this for background to show up.
        }
        //==========================================================
        public Component getTableCellRendererComponent(
                JTable table, Object value,
                boolean isSelected, boolean hasFocus,
                int row, int column) {
            switch (column) {
                case 1:
                    if (row==selectedRow)
                        setBackground(selectionBackground);
                    else
                        setBackground(Color.white);
                    setText("  "+hdbTables.get(row).size());
                    break;
                default:
                    if (row==selectedRow)
                        setBackground(selectionBackground);
                    else
                        setBackground(firstColumnBackground);
                    setText("  " + hdbTables.get(row).getName());
                    break;
            }
            return this;
        }
    }
    //=========================================================================
    //=========================================================================

}
