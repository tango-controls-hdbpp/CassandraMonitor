/*----- PROTECTED REGION ID(CassandraMonitor.java) ENABLED START -----*/
//=============================================================================
//
// file :        CassandraMonitor.java
//
// description : Java source for the CassandraMonitor class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               CassandraMonitor are implemented in this file.
//
// project :     Cassandra monitor
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
// Copyright (C): 2016
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.java

package org.tango.cassandramonitor;

/*----- PROTECTED REGION ID(CassandraMonitor.imports) ENABLED START -----*/

import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.PipeBlob;
import fr.esrf.TangoDs.Except;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.*;
import org.tango.server.device.DeviceManager;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.events.EventManager;
import org.tango.server.pipe.PipeValue;
import org.tango.utils.DevFailedUtils;

import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.List;

/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.imports

/**
 *  CassandraMonitor class description:
 *    This class is used to monitor a Cassandra cluster
 */

@Device
public class CassandraMonitor {

	protected static final Logger logger = LoggerFactory.getLogger(CassandraMonitor.class);
	protected static final XLogger xlogger = XLoggerFactory.getXLogger(CassandraMonitor.class);
	//========================================================
	//	Programmer's data members
	//========================================================
    /*----- PROTECTED REGION ID(CassandraMonitor.variables) ENABLED START -----*/

    //	Put static variables here
    private static boolean runThreads = true;

    /*----- PROTECTED REGION END -----*/	//	CassandraMonitor.variables
	/*----- PROTECTED REGION ID(CassandraMonitor.private) ENABLED START -----*/

    //	Put private variables here
    private ObjectName storageServiceObjName;
    private ObjectName storageMetricsLoadObjName;
    private ObjectName compactionObjName;
	private JmxToCompactions jmxToCompactions;
	private JmxUtilities jmxUtilities;

	/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.private

	//========================================================
	//	Property data members and related methods
	//========================================================
	/**
	 * Device Property JMXPort
	 * JMX port
	 */
	@DeviceProperty(name="JMXPort", description="JMX port" ,
	        defaultValue= { "7199" })
	private short jMXPort;
	/**
	 * set property JMXPort
	 * @param  jMXPort  see description above.
	 */
	public void setJMXPort(short jMXPort) {
		this.jMXPort = jMXPort;
		/*----- PROTECTED REGION ID(CassandraMonitor.setJMXPort) ENABLED START -----*/

        //	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setJMXPort
	}
	
	/**
	 * Device Property Node
	 * Name or IP address of the Cassandra node we want to communicate with via JMX.
	 */
	@DeviceProperty(name="Node", description="Name or IP address of the Cassandra node we want to communicate with via JMX." )
	private String node;
	/**
	 * set property Node
	 * @param  node  see description above.
	 */
	public void setNode(String node) {
		this.node = node;
		/*----- PROTECTED REGION ID(CassandraMonitor.setNode) ENABLED START -----*/

        //	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setNode
	}
	
	/**
	 * Device Property JMXUser
	 * JMX user name if authentication is enabled on JMX service
	 */
	@DeviceProperty(name="JMXUser", description="JMX user name if authentication is enabled on JMX service" )
	private String jMXUser;
	/**
	 * set property JMXUser
	 * @param  jMXUser  see description above.
	 */
	public void setJMXUser(String jMXUser) {
		this.jMXUser = jMXUser;
		/*----- PROTECTED REGION ID(CassandraMonitor.setJMXUser) ENABLED START -----*/

        //	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setJMXUser
	}
	
	/**
	 * Device Property JMXPassword
	 * JMX password if authentication is enabled on JMX service
	 */
	@DeviceProperty(name="JMXPassword", description="JMX password if authentication is enabled on JMX service" )
	private String jMXPassword;
	/**
	 * set property JMXPassword
	 * @param  jMXPassword  see description above.
	 */
	public void setJMXPassword(String jMXPassword) {
		this.jMXPassword = jMXPassword;
		/*----- PROTECTED REGION ID(CassandraMonitor.setJMXPassword) ENABLED START -----*/

        //	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setJMXPassword
	}
	
	/**
	 * Device Property JMXConnectionTimeout
	 * Timeout on JMX connection (seconds).
	 */
	@DeviceProperty(name="JMXConnectionTimeout", description="Timeout on JMX connection (seconds)." ,
	        defaultValue= { "3" })
	private int jMXConnectionTimeout;
	/**
	 * set property JMXConnectionTimeout
	 * @param  jMXConnectionTimeout  see description above.
	 */
	public void setJMXConnectionTimeout(int jMXConnectionTimeout) {
		this.jMXConnectionTimeout = jMXConnectionTimeout;
		/*----- PROTECTED REGION ID(CassandraMonitor.setJMXConnectionTimeout) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setJMXConnectionTimeout
	}
	
	/**
	 * Device Property Simulate
	 * Will simulate compation if true
	 */
	@DeviceProperty(name="Simulate", description="Will simulate compation if true" ,
	        defaultValue= { "false" })
	private boolean simulate;
	/**
	 * set property Simulate
	 * @param  simulate  see description above.
	 */
	public void setSimulate(boolean simulate) {
		this.simulate = simulate;
		/*----- PROTECTED REGION ID(CassandraMonitor.setSimulate) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setSimulate
	}
	


	//========================================================
	//	Miscellaneous methods
	//========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public void initDevice() throws DevFailed {
		xlogger.entry();
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(CassandraMonitor.initDevice) ENABLED START -----*/

		jmxUtilities = new JmxUtilities(node, jMXPort, jMXUser, jMXPassword, jMXConnectionTimeout);
        //	Put your device initialization code here
        try {
            storageServiceObjName = new ObjectName("org.apache.cassandra.db:type=StorageService");
        } catch (MalformedObjectNameException ex) {
            xlogger.error(ex.getMessage());
            throw DevFailedUtils.newDevFailed("MalformedObjectNameException",
                    "MalformedObjectNameException for object \"org.apache.cassandra.db:type=StorageService\"");
        }
        try {
            storageMetricsLoadObjName = new ObjectName("org.apache.cassandra.metrics:type=Storage,name=Load");
        } catch (MalformedObjectNameException ex) {
            xlogger.error(ex.getMessage());
            throw DevFailedUtils.newDevFailed("MalformedObjectNameException",
                    "MalformedObjectNameException for object \"org.apache.cassandra.metrics:type=Storage,name=Load\"");
        }
        try {
            compactionObjName = new ObjectName("org.apache.cassandra.db:type=CompactionManager");
        } catch (MalformedObjectNameException ex) {
            xlogger.error(ex.getMessage());
            throw DevFailedUtils.newDevFailed("MalformedObjectNameException",
                    "MalformedObjectNameException for object \"org.apache.cassandra.db:type=CompactionManager\"");
        }

        try {
            jmxUtilities.connect();
        } catch (DevFailed ex) {
            xlogger.error(ex.getMessage());
        }
        new CompactionsThread().start();
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.initDevice
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed if something fails during the device object deletion.
	 */
	@Delete
	public void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(CassandraMonitor.deleteDevice) ENABLED START -----*/

		jmxUtilities.close();
		runThreads = false;

		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * @param ctx the invocation context
	 * @throws DevFailed if something fails during this method execution.
	 */
	@AroundInvoke
	public void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry();
			/*----- PROTECTED REGION ID(CassandraMonitor.aroundInvoke) ENABLED START -----*/

        //	Put aroundInvoke code here
			
			/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.aroundInvoke
		xlogger.exit();
	}

	
	/**
	 * dynamic command and attribute management. Will be injected by the framework.
	 */
	@DynamicManagement
	protected DynamicManager dynamicManager;
	/**
	 * @param dynamicManager the DynamicManager instance 
	 * @throws DevFailed if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager) throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(CassandraMonitor.setDynamicManager) ENABLED START -----*/

        //	Put your code here
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.setDynamicManager
	}
	
	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;
	public void setDeviceManager(DeviceManager deviceManager){
		this.deviceManager= deviceManager ;
	}


	//========================================================
	//	Attribute data members and related methods
	//========================================================
	/**
	 * Attribute DataLoadStr, String, Scalar, READ
	 * description:
	 *     Data Load on disk of the Cassandra node (node from the node property).
	 */
	@Attribute(name="DataLoadStr", isPolled=true, pollingPeriod=60000)
	@AttributeProperties(description="Data Load on disk of the Cassandra node (node from the node property).",
	                     label="DataLoadStr")
	private String dataLoadStr = "";
	/**
	 * Read attribute DataLoadStr
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getDataLoadStr() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getDataLoadStr) ENABLED START -----*/

        //	Put read attribute code here
        dataLoadStr = jmxUtilities.getAttribute(storageServiceObjName, "LoadString").toString();
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getDataLoadStr
		attributeValue.setValue(dataLoadStr);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute OperationMode, String, Scalar, READ
	 * description:
	 *     Cassandra node current operation mode (NORMAL,JOINING,LEAVING...)
	 */
	@Attribute(name="OperationMode", isPolled=true, pollingPeriod=1000)
	@AttributeProperties(description="Cassandra node current operation mode (NORMAL,JOINING,LEAVING...)",
	                     label="Operation Mode", archiveEventPeriod="3600000")
	private String operationMode = "";
	/**
	 * Read attribute OperationMode
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getOperationMode() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getOperationMode) ENABLED START -----*/

        //	Put read attribute code here
        operationMode = jmxUtilities.getAttribute(storageServiceObjName, "OperationMode").toString();
        switch (operationMode) {
            case "STARTING":
                setState(DevState.INIT);
                break;
            case "NORMAL":
                setState(DevState.ON);
                break;
            case "JOINING":
                setState(DevState.STANDBY);
                break;
            case "LEAVING":
            case "MOVING":
            case "DRAINING":
                setState(DevState.MOVING);
                break;
            case "DRAINED":
                setState(DevState.OFF);
                break;
            case "DECOMMISSIONED":
                setState(DevState.DISABLE);
                break;
            default:
                setState(DevState.UNKNOWN);
        }
        setStatus(operationMode);
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getOperationMode
		attributeValue.setValue(operationMode);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute DataLoad, long, Scalar, READ
	 * description:
	 *     Data Load on disk of the Cassandra node (node from the node property).
	 */
	@Attribute(name="DataLoad", isPolled=true, pollingPeriod=60000)
	@AttributeProperties(description="Data Load on disk of the Cassandra node (node from the node property).",
	                     label="Data Load", unit="KB", standardUnit="1", displayUnit="0.0009765625",
	                     changeEventAbsolute="1", archiveEventPeriod="3600000", archiveEventAbsolute="1")
	private long dataLoad;
	/**
	 * Read attribute DataLoad
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getDataLoad() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getDataLoad) ENABLED START -----*/

        //	Put read attribute code here
        dataLoad = (Long) jmxUtilities.getAttribute(storageMetricsLoadObjName, "Count");
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getDataLoad
		attributeValue.setValue(dataLoad);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute CassandraVersion, String, Scalar, READ
	 * description:
	 *     Cassandra release version
	 */
	@Attribute(name="CassandraVersion", isPolled=true, pollingPeriod=60000)
	@AttributeProperties(description="Cassandra release version", label="Cassandra Version")
	private String cassandraVersion = "";
	/**
	 * Read attribute CassandraVersion
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getCassandraVersion() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getCassandraVersion) ENABLED START -----*/

        //	Put read attribute code here
        cassandraVersion = jmxUtilities.getAttribute(storageServiceObjName, "ReleaseVersion").toString();
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getCassandraVersion
		attributeValue.setValue(cassandraVersion);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute ClusterName, String, Scalar, READ
	 * description:
	 *     Cassandra cluster name
	 */
	@Attribute(name="ClusterName")
	@AttributeProperties(description="Cassandra cluster name", label="Cluster name")
	private String clusterName = "";
	/**
	 * Read attribute ClusterName
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getClusterName() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getClusterName) ENABLED START -----*/

        //	Put read attribute code here
        clusterName = jmxUtilities.getAttribute(storageServiceObjName, "ClusterName").toString();
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getClusterName
		attributeValue.setValue(clusterName);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute UnreachableNodes, String, Spectrum, READ
	 * description:
	 *     List of Cassandra nodes from the cluster which are currently unreachable.
	 */
	@Attribute(name="UnreachableNodes", isPolled=true, pollingPeriod=3000)
	@AttributeProperties(description="List of Cassandra nodes from the cluster which are currently unreachable.",
	                     label="Unreachable Nodes")
	private String[] unreachableNodes = new String[2000];
	/**
	 * Read attribute UnreachableNodes
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getUnreachableNodes() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getUnreachableNodes) ENABLED START -----*/

        //	Put read attribute code here
        java.util.List list = (List) jmxUtilities.getAttribute(storageServiceObjName, "UnreachableNodes");
        unreachableNodes = new String[list.size()];
        int i = 0;
        for (Object n : list) {
            try {
                InetAddress addr = InetAddress.getByName(n.toString());
                unreachableNodes[i] = addr.getHostName();
            } catch (UnknownHostException ex) {
                unreachableNodes[i] = n.toString();
            }
            i++;
        }
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getUnreachableNodes
		attributeValue.setValue(unreachableNodes);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute LiveNodes, String, Spectrum, READ
	 * description:
	 *     List of Cassandra nodes from the cluster which are currently alive
	 */
	@Attribute(name="LiveNodes", isPolled=true, pollingPeriod=3000)
	@AttributeProperties(description="List of Cassandra nodes from the cluster which are currently alive",
	                     label="Live nodes")
	private String[] liveNodes = new String[2000];
	/**
	 * Read attribute LiveNodes
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getLiveNodes() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(CassandraMonitor.getLiveNodes) ENABLED START -----*/

        //	Put read attribute code here
        java.util.List list = (List) jmxUtilities.getAttribute(storageServiceObjName, "LiveNodes");
        liveNodes = new String[list.size()];
        int i = 0;
        for (Object n : list) {
            try {
                InetAddress inetAddress = InetAddress.getByName(n.toString());
                liveNodes[i] = inetAddress.getHostName();
            } catch (UnknownHostException ex) {
                liveNodes[i] = n.toString();
            }
            i++;
        }
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getLiveNodes
		attributeValue.setValue(liveNodes);
		xlogger.exit();
		return attributeValue;
	}
	

	//========================================================
	//	Pipe data members and related methods
	//========================================================
	/**
	 * Pipe Compactions
	 * description:
	 *     Give the compactions status
	 */
	@Pipe(displayLevel=DispLevel._OPERATOR, label="Compactions")
	private PipeValue compactions;
	/**
	 * Read Pipe Compactions
	 * 
	 * @return attribute value
	 * @throws DevFailed if read pipe failed.
	 */
	public PipeValue getCompactions() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(CassandraMonitor.getCompactions) ENABLED START -----*/
        /*
         *  Done by thread
         */
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getCompactions
		xlogger.exit();
		return compactions;
	}

	//========================================================
	//	Command data members and related methods
	//========================================================
	/**
	 * The state of the device
	*/
	@State
	private DevState state = DevState.UNKNOWN;
	/**
	 * Execute command "State".
	 * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
	 * @return Device state
	 * @throws DevFailed if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(CassandraMonitor.getState) ENABLED START -----*/

        //	If connection failed set as UNKNOWN
		if (jmxUtilities.connectionFailed())
			state = DevState.UNKNOWN;
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getState
		return state;
	}
	/**
	 * Set the device state
	 * @param state the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}
	
	/**
	 * The status of the device
	 */
	@Status
	private String status = "Server is starting. The device state is unknown";
	/**
	 * Execute command "Status".
	 * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
	 * @return Device status
	 * @throws DevFailed if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(CassandraMonitor.getStatus) ENABLED START -----*/

		//	If connection failed set with error
		if (jmxUtilities.connectionFailed())
			status = jmxUtilities.getConnectionError();

		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.getStatus
		return status;
	}
	/**
	 * Set the device status
	 * @param status the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}
	
	/**
	 * Execute command "StartSimulation".
	 * description: Restart simulation if used
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="StartSimulation", inTypeDesc="", outTypeDesc="")
	public void StartSimulation() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(CassandraMonitor.startSimulation) ENABLED START -----*/

		if (simulate) {
			System.out.println(node + ": Start the Simulation....");
			jmxToCompactions.startSimulation();
		}

		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.startSimulation
		xlogger.exit();
	}
	

	//========================================================
	//	Programmer's methods
	//========================================================
	/*----- PROTECTED REGION ID(CassandraMonitor.methods) ENABLED START -----*/

    private class CompactionsThread extends Thread {
		private CompactionsThread() {
			jmxToCompactions = new JmxToCompactions(node);
		}
        public void run() {
			while (runThreads) {
                try {
                    if (simulate) {
                    	jmxToCompactions.setList();
                    }
                    else {
                        //  Build compaction object list
						Object jmxAtt = jmxUtilities.getAttribute(compactionObjName, "Compactions");
						//noinspection unchecked
						jmxToCompactions.setList((List<HashMap<String, String>>) jmxAtt);
                    }
                    if (jmxToCompactions.hasChanged()) {
                        PipeBlob pipeBlob = jmxToCompactions.getPipeBlob();
                        //  And sent it to pipe and event
                        compactions = new PipeValue(pipeBlob);
                        EventManager.getInstance().pushPipeEvent(deviceManager.getName(), "Compactions", compactions);

                        //System.out.println("Compactions  change");
                    } else {
                        //  Check if first call
                        if (compactions ==null)
                            compactions = new PipeValue(jmxToCompactions.getPipeBlob());
                        //System.out.println("No change");
                    }
                } catch (DevFailed e) {
                    //  Build pipe with error description and send event
                    compactions = new PipeValue(new PipeBlob(e.errors[0].desc));
                    try {
                        EventManager.getInstance().pushPipeEvent(
                        		deviceManager.getName(), "Compactions", compactions);
                    } catch (DevFailed devFailed) {
                        Except.print_exception(devFailed);
                    }
                }
                try {
                    sleep(1000);
                } catch (InterruptedException e) {
                    System.err.println(e.toString());
                }
            }
        }
    }

	/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.methods


	
	
	
	
	/**
	 * Starts the server.
	 * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		/*----- PROTECTED REGION ID(CassandraMonitor.main) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	CassandraMonitor.main
		ServerManager.getInstance().start(args, CassandraMonitor.class);
		System.out.println("------- Started -------------");
	}
}
